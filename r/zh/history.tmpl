<{include}>zh/head.tmpl<{/include}>
<div class="header">
  <h1> 历史 </h1>
  </div>
  <div class="block2">
  <{markdown}>

Radare 诞生于 2006 年，当时 *pancake* 正以「取证分析师」的身份工作。他决定写一个简单的十六进制编辑器，支持搜索模式和 dump 搜索结果到磁盘，
用于恢复已被从一个 HFS 分区删除的一些 PHP 文件。

RA-DA-RE 是 RAw DAta REcovery 的缩写。

Radare 是一个手边工具，其他特性被陆续添加到这个简单的命令行十六进制编辑器中，以支持反汇编、文件格式解析，调试等等。

Radare 的设计灵感源于基础的 *NIX 概念，如 “协议在普通的文本中”，“一切都是一个文件”，“简单的程序，使用输入/输出互相作用”，以及“保持简单”。Radare 命令
绝大部分强大的能力源于「通过管道（pipe）」组合其他命令的能力。

2009 年，radare 第一个版本的实现，已经发展到了一个拐点，需要对基础代码进行一个完整的重新设计，以适当地支持脚本语言的绑定。

Radare2 始于 radare 基础代码的重写，遵循模块化的设计和 LGPLv3 许可。Radare2 和 radare，并行开发，因为尽管设计更好，但需要很长一段时间才能
达到 radare 等同的特性。

直到 2014，radare2 已经达到可以完整替换 radare1 的状态。虽然调试器中依然缺乏一些特性，radare2 几乎在每一个方面都已经匹配或超过 radare1。

最近一年（2014），项目成长非常快速，(一月 IRC 有 40 个用户，十二月已经增长到 170)，Radare 编码之夏（Radare Summer of Code (RSoC)）带
来了新特性，用户和开发者。同时，在国际安全会议上有很多演讲和培训。

经过 8 年的开发之后，Radare 从一个个人项目发展成为一个社区项目。随着项目的成长，需要更多的时间和努力，来评审代码贡献，实现特有的安全开发实践，
编写适当的测试集，模糊不同的输入（文件格式，命名还原（demanglers），反汇编器，命令语法等），执行 coverity 分析，检验所有编译器告警，llvm 分析，
valgrind，ASAN 等等。

虽然控制台接口非常的强悍，但 r2 最主要的一个需求始终是拥有一个合适的 GUI。现在 Radare2 有了一个 web 前端，对于商业反汇编器的用户，应该感觉很熟悉。同时，
r2pipe 的 API 也可以用于 Python，NodeJS 或 Web 浏览器，提供一个强大的接口去自动化任务或与 radare2 的内核交互。

  <{/markdown}>
  </div>
  <{include}>zh/tail.tmpl<{/include}>
